; audio cpu temperature memory date layout

; Variables {{{
(include "./bars.yuck")
(defvar eww "eww -c ~/.config/eww")
(defvar revealmusic false)
(defvar revealvol false)
(defvar revealbat false)
(defvar revealram false)
(defvar revealcpu false)
(defvar revealdisk false)
(defvar revealtime false)
(defvar reveallight false)
(defvar revealpower false)
(defvar revealpowera false)
(defvar revealpowerb false)
(defvar revealpowerc false)
; }}}

(defwidget bar [] ;{{{
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (bbox :halign "end"
      (sidestuff)
      (tray)))); }}}
(defwidget alt-bar [] ; {{{
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))
; }}}
(defwidget sidestuff [] ; {{{
  (bbox :class "sidestuff"
        :halign "end"
    (bbox
      (hover-left :var revealmusic
                  :varname "revealmusic"
        (bbox
          {music != "" ? "${music} " : ""})
        (bbutton :onclick "(sleep 1; ${eww} update revealmusic=true)"
          (label :text "ðŸŽµ"))))
    (delim)
    (bbox :tooltip "Memory"
      (bbox
        (label :text "ï¡š ${round(memory_used_mb / 1024, 2)}/${round(memory_total_mb / 1024, 2)}GB")))
    (delim)
    (bbox :tooltip "CPU"
      (metric :value {EWW_CPU.avg})
      (label :text "ï¬™ ${round(EWW_CPU.avg, 0)}%"))
    (delim)
    (bbox :tooltip "Battery"
      (bbox
      (metric :value battery)
      ; (label :text "ï–ƒ ${battery <= 15 ? "${battery}%" : ""}")))
      (label :text "ï–ƒ ${battery}%")))
    (delim)
    (bbox
      (hover-double :var revealtime
                    :varname "revealtime"
                    :class "condensed"
      (label :text "${date}-")
      (label :text ":${seconds}")
      (label :text time)))
    ))
; }}}
(defwidget workspaces [] ; {{{
    (bbox :halign "start"
      (bbox
        (eventbox
          (literal :content workspaces_listen)))
      (delim)
      (bbox
        (bbutton :onclick "scripts/getlayout"
          (label :text layout)))))
(deflisten workspaces_listen "scripts/workspace")
; }}}
(defwidget music [] ; {{{
  ; (bbox :class "music"
  ;      :orientation "h"
  ;      :space-evenly false
  ;      :halign "center"
  ;   {music != "" ? "ðŸŽµ{music}" : ""}
  ; (delim)
  (bbox :class title
    (label :text title)))
; }}}
;(defwidget metric [label value onchange] ; {{{
;  (box :orientation "h"
;       :class "metric"
;       :space-evenly false
;    (box :class "label" label)
;    (scale :min 0
;           :max 101
;           :active {onchange != ""}
;           :value value
;           :onchange onchange)))
; }}}
(defwidget tray [] ; {{{
  (box  :halign "end"
        :style "padding-right: ${traysize}px;"
    (children)))
(deflisten traysize :initial "0"
  "scripts/traysize") ; }}}

; pollers and listeners {{{
(deflisten layout :initial "Tall"
  "xmonad-log")
(defpoll polllayout :interval "1s"
  "xmonad-log")
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

; (defpoll layout :interval "1s"
;   "scripts/getlayout")
(defpoll battery :interval "1m"
  "cat /sys/class/power_supply/BAT0/capacity")

(defpoll volume :interval "1s"
  "scripts/getvol")

; (defpoll time :interval "10s"
;   "date '+%H:%M %b %d, %Y'")
(defpoll seconds :interval "1s"
  "date '+%S'")
(defpoll date :interval "30m"
  "date '+%a %b %d'")
(defpoll time :interval "10s"
  "date '+%H:%M'")

(defpoll memory_used_mb  :interval "2m" "scripts/memory-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/memory-ad total")
(defpoll memory_free_mb  :interval "2m" "scripts/memory-ad free")
(defpoll title :initial ""
               :interval "250ms"
  "xdotool getactivewindow getwindowname | awk -v len=60 '{ if (length($0) > len) print substr($0, 1, len-1) \"â€¦\"; else print; }'")
; }}}
; ; defwindow bars {{{
; (defwindow bar_0 ; {{{
;   ; :monitor 0
;   ; :wm-ignore true
;   :stacking "bg"
;   :windowtype "dock"
;   :geometry (geometry :x "0%"
;                       :y "0%"
;                       :width "99%"
;                       :height "10px"
;                       :anchor "top center")
;   :reserve (struts :side "top" :distance "36px")
;   (primarybar)) ; }}}
; (defwindow bar_1 ; {{{
;   ; :monitor 1
;   ; :wm-ignore true
;   :stacking "bg"
;   :windowtype "dock"
;   :geometry (geometry :x "0%"
;                       :y "0%"
;                       :width "99%"
;                       :height "10px"
;                       :anchor "top center")
;   :reserve (struts :side "top" :distance "36px")
;   (bar)) ; }}}
; (defwindow bar_2 ; {{{
;   ; :monitor 2
;   ; :wm-ignore true
;   :stacking "bg"
;   :windowtype "dock"
;   :geometry (geometry :x "0%"
;                       :y "0%"
;                       :width "99%"
;                       :height "10px"
;                       :anchor "top center")
;   :reserve (struts :side "top" :distance "36px")
;   (bar)) ; }}}
; ; }}}


(defwidget bbutton [?class ?onclick ?onmiddleclick ?onrightclick ?timeout] ; Based button with pointer-cursor {{{
  (eventbox :cursor {"${onclick}${onmiddleclick}${onrightclick}" != "" ? "pointer" : "default"}
    (button :onclick onclick
            :onmiddleclick onmiddleclick
            :onrightclick onrightclick
            :class {"${onclick}${onmiddleclick}${onrightclick}" != "" ? "clickable ${class}" : class}
      (children)))) ; }}}

(defwidget dlabel [?class ?style ?text ?markup] ; A dynamic label {{{
  (label :class class
         :style {text != "" ? style : "padding: 0 0px; ${style}"}
         :text text
         :markup markup
    (children))) ; }}}

(defwidget bbox [?class ?style ?tooltip ?orientation ?space-evenly ?spacing ?halign ?valign] ; A based box {{{
  (box :class class
       :style style
       :tooltip tooltip
       :orientation {orientation ?: "h"}
       :space-evenly {space-evenly ?: false}
       :spacing {spacing ?: 0}
       :halign {halign ?: "center"}
       :valign {valign ?: "fill"}
    (children))) ; }}}

(defwidget metric [value ?class ?onchange ?min ?max] ; {{{
  (eventbox :cursor {onchange != "" ? "col-resize" : "default"}
    (scale :min {min ?: 0}
           :max {max ?: 101}
           :active {onchange != ""}
           :value value
           :onchange onchange
           :class "metric ${class} ${onchange != "" ? 'modifiable' : ''}"
      (children))))
; }}}

(defwidget hover-left [var varname ?class ?duration] ; {{{
  (eventbox :onhover "${eww} update ${varname}=true"
            :onhoverlost "${eww} update ${varname}=false"
            :class "hover ${class}"
    (box :orientation "h"
         :space-evenly false
      (revealer :reveal var
                :transition "slideleft"
                :duration {duration ?: "350ms"}
        (box :class "child"
             :space-evenly false
          (children :nth 0)))
      (box :class "main"
           :space-evenly false
        (children :nth 1)))))
; }}}

(defwidget hover-right [var varname ?class ?duration] ; {{{
  (eventbox :onhover "${eww} update ${varname}=true"
            :onhoverlost "${eww} update ${varname}=false"
            :class "hover ${class}"
    (box :orientation "h"
         :space-evenly false
      (revealer :reveal var
                :transition "slideright"
                :duration {duration ?: "350ms"}
        (box :class "child"
             :space-evenly false
          (children :nth 0)))
      (box :class "main"
           :space-evenly false
        (children :nth 1)))))
; }}}

(defwidget hover-double [var varname ?class ?duration] ; {{{
  (eventbox :onhover "${eww} update ${varname}=true"
            :onhoverlost "${eww} update ${varname}=false"
            :class "${class} hover hover-double"
    (box :orientation "h"
         :space-evenly false
      (box :class "child"
           :space-evenly false
        (revealer :reveal var
                  :transition "slideleft"
                  :duration {duration ?: "350ms"}
          (children :nth 0)))
      (box :class "main"
           :space-evenly false
        (children :nth 2))
      (box :class "child"
           :space-evenly false
        (revealer :reveal var
                :transition "slideright"
                :duration {duration ?: "350ms"}
          (children :nth 1))))))
; }}}

(defwidget click-left [var varname ?class ?duration] ; {{{
  (eventbox :onhoverlost "${eww} update ${varname}=false"
            :class "hover ${class}"
            :cursor "pointer"
    (box :orientation "h"
         :space-evenly false
      (revealer :reveal var
                :transition "slideleft"
                :duration {duration ?: "350ms"}
        (box :class "child"
             :space-evenly false
          (children :nth 0)))
      (button :class "main"
              :onclick "${eww} update ${varname}=true"
        (children :nth 1)))))
; }}}

(defwidget delim [] ; A module delimiter {{{
  (box :style "margin: 0 5px; padding: 0;"
       ;:tooltip tooltip
       :orientation "h"
       :space-evenly false
       :spacing 0
       :halign "center"
       :valign "fill"
    (children))) ; }}}
